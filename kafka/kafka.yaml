apiVersion: apps/v1
kind: Deployment
metadata:
  name: kafka
  labels:
    app.kubernetes.io/name: kafka
spec:
  replicas: 3
  selector:
    matchLabels:
      app.kubernetes.io/name: kafka
  template:
    metadata:
      name: kafka
      labels:
        app.kubernetes.io/name: kafka
    spec:
      securityContext:
        fsGroup: 1001
      initContainers:
        - name: volume-permissions
          image: Placeholder_registry/bitnami-shell:10
          imagePullPolicy: "IfNotPresent"
          command:
            - chown
          args:
            - -R
            - 1001:1001
            - /bitnami/kafka
          securityContext:
            runAsUser: 0
          volumeMounts:
            - name: data
              mountPath: /bitnami/kafka
      containers:
        - name: kafka
          image: Placeholder_registry/bitnami-kafka:3.1.1
          imagePullPolicy: "IfNotPresent"
          securityContext:
            runAsUser: 1001
          command:
            - bash
            - -ec
            - |
              ID=$(echo $HOST_IP |awk -F . '{print $4}')
              if [[ -f "/bitnami/kafka/data/meta.properties" ]]; then
                  export KAFKA_CFG_BROKER_ID="$(grep "broker.id" /bitnami/kafka/data/meta.properties | awk -F '=' '{print $2}')"
              else
                  export KAFKA_CFG_BROKER_ID="$ID"
              fi
              # Configure Kafka advertised listeners
              export KAFKA_CFG_ADVERTISED_LISTENERS="INTERNAL://${HOST_IP}:9093,CLIENT://${HOST_IP}:9092"

              exec /entrypoint.sh /run.sh
          resources:
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: KAFKA_CFG_ZOOKEEPER_CONNECT
              value: "Placeholder_zk_quorum"
            - name: KAFKA_INTER_BROKER_LISTENER_NAME
              value: "INTERNAL"
            - name: KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP
              value: "INTERNAL:PLAINTEXT,CLIENT:PLAINTEXT"
            - name: KAFKA_CFG_LISTENERS
              value: "INTERNAL://:9093,CLIENT://:9092"
            - name: HOST_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.hostIP
            - name: ALLOW_PLAINTEXT_LISTENER
              value: "yes"
            - name: KAFKA_VOLUME_DIR
              value: "/bitnami/kafka"
            - name: KAFKA_LOG_DIR
              value: "/opt/bitnami/kafka/logs"
            - name: KAFKA_CFG_DELETE_TOPIC_ENABLE
              value: "true"
            - name: KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE
              value: "true"
            - name: KAFKA_HEAP_OPTS
              value: "-Xmx2048m -Xms2048m"
            - name: KAFKA_CFG_LOG_FLUSH_INTERVAL_MESSAGES
              value: "10000"
            - name: KAFKA_CFG_LOG_FLUSH_INTERVAL_MS
              value: "1000"
            - name: KAFKA_CFG_LOG_RETENTION_BYTES
              value: "1073741824"
            - name: KAFKA_CFG_LOG_RETENTION_CHECK_INTERVALS_MS
              value: "300000"
            - name: KAFKA_CFG_LOG_RETENTION_HOURS
              value: "168"
            - name: KAFKA_CFG_MESSAGE_MAX_BYTES
              value: "1000012"
            - name: KAFKA_CFG_LOG_SEGMENT_BYTES
              value: "1073741824"
            - name: KAFKA_CFG_LOG_DIRS
              value: "/bitnami/kafka/data"
            - name: KAFKA_CFG_DEFAULT_REPLICATION_FACTOR
              value: "1"
            - name: KAFKA_CFG_OFFSETS_TOPIC_REPLICATION_FACTOR
              value: "1"
            - name: KAFKA_CFG_TRANSACTION_STATE_LOG_REPLICATION_FACTOR
              value: "1"
            - name: KAFKA_CFG_TRANSACTION_STATE_LOG_MIN_ISR
              value: "1"
            - name: KAFKA_CFG_NUM_IO_THREADS
              value: "8"
            - name: KAFKA_CFG_NUM_NETWORK_THREADS
              value: "3"
            - name: KAFKA_CFG_NUM_PARTITIONS
              value: "1"
            - name: KAFKA_CFG_NUM_RECOVERY_THREADS_PER_DATA_DIR
              value: "1"
            - name: KAFKA_CFG_SOCKET_RECEIVE_BUFFER_BYTES
              value: "102400"
            - name: KAFKA_CFG_SOCKET_REQUEST_MAX_BYTES
              value: "104857600"
            - name: KAFKA_CFG_SOCKET_SEND_BUFFER_BYTES
              value: "102400"
            - name: KAFKA_CFG_ZOOKEEPER_CONNECTION_TIMEOUT_MS
              value: "6000"
          volumeMounts:
            - name: data
              mountPath: /bitnami/kafka
          livenessProbe:
            tcpSocket:
              port: 9092
            initialDelaySeconds: 30
            timeoutSeconds: 5
            failureThreshold: 10
            periodSeconds: 10
            successThreshold: 1
          readinessProbe:
            tcpSocket:
              port: 9092
            initialDelaySeconds: 15
            timeoutSeconds: 5
            failureThreshold: 10
            periodSeconds: 10
            successThreshold: 1
      volumes:
        - name: data
          hostPath:
            path: /data/kafka
      restartPolicy: Always
      hostNetwork: true
      dnsPolicy: ClusterFirstWithHostNet
      nodeSelector:
        kafka: "true"
      tolerations:
        - key: "project"
          value: "gdbdc"
          operator: "Equal"
          effect: "NoSchedule"
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchLabels:
                  app.kubernetes.io/name: kafka
              topologyKey: kubernetes.io/hostname
---
apiVersion: v1
kind: Service
metadata:
  name: kafka
  labels:
    app.kubernetes.io/name: kafka
spec:
  selector:
    app.kubernetes.io/name: kafka
  ports:
  - port: 9092
    targetPort: 9092
    name: kafka
